<mvvm:MVVMPage
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:GreaterShare"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:mvvm="using:MVVMSidekick.Views"
    xmlns:vm="using:GreaterShare.ViewModels"  
    xmlns:Interactivity="using:Microsoft.Xaml.Interactivity" xmlns:Core="using:Microsoft.Xaml.Interactions.Core" xmlns:Glue="using:GreaterShare.Glue" xmlns:Media="using:Microsoft.Xaml.Interactions.Media" x:Name="mVVMPage"
    x:Class="GreaterShare.MainPage"
    mc:Ignorable="d" Width="{Binding ActualWidth, ElementName=mVVMPage, Mode=OneWay}" Height="{Binding ActualHeight, ElementName=mVVMPage, Mode=OneWay}">
    <mvvm:MVVMPage.Resources>
        <!--<Glue:EqualConverter x:Key="EqualConverter"/>-->
        <!--<vm:MainPage_Model x:Key="DesignVMMainPage_Model"/>-->       
        <Glue:NotValueConverter x:Key="NotValueConverter"/>
    </mvvm:MVVMPage.Resources>
    <RelativePanel  x:Name="grid" Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"  >
        <d:DataContext>
            <vm:MainPage_Model></vm:MainPage_Model>
        </d:DataContext>
        <Interactivity:Interaction.Behaviors>
            <Core:DataTriggerBehavior  Binding="{Binding ReceivedShareItem}"  Value="{x:Null}">
                <Core:GoToStateAction StateName="False" UseTransitions="True"/>
            </Core:DataTriggerBehavior>
            <Core:DataTriggerBehavior Binding="{Binding ReceivedShareItem}"  ComparisonCondition="NotEqual" Value="{x:Null}">
                <Core:GoToStateAction StateName="True" UseTransitions="True"/>
            </Core:DataTriggerBehavior>
            <Glue:StateTriggerActiveReadingBehavior 
                x:Name="StateTriggerActiveReadingBehavior"
                WideTrigger="{Binding ElementName=wideTrigger}"
                NarrowTrigger="{Binding ElementName=narrowTrigger}"/>
            <!--<Core:DataTriggerBehavior Binding="{Binding  ActualWidth  , ElementName=grid, FallbackValue=0}" ComparisonCondition="GreaterThan"  Value="{Binding ActualHeight, ElementName=grid, FallbackValue=0}">
                <Core:GoToStateAction StateName="WideView"/>
            </Core:DataTriggerBehavior>
            <Core:DataTriggerBehavior Binding="{Binding ActualWidth, ElementName=grid, FallbackValue=0}" ComparisonCondition="LessThanOrEqual" Value="{Binding  ActualHeight  , ElementName=grid,FallbackValue=0}">
                <Core:GoToStateAction StateName="NarrowView"/>
            </Core:DataTriggerBehavior>-->
        </Interactivity:Interaction.Behaviors>
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="IsReceivedItemAvailable">
                <VisualState x:Name="True">
                    <VisualState.Setters>
                        <Setter Target="textBlock.(UIElement.Opacity)" Value="0"/>
                        <Setter Target="textBlock.(UIElement.Visibility)" Value="Collapsed"/>
                        <Setter Target="relativePanel.(UIElement.Opacity)" Value="1"/>
                        <Setter Target="relativePanel.(UIElement.Visibility)" Value="Visible"/>
                    </VisualState.Setters>

                </VisualState>
                <VisualState x:Name="False">
                    <VisualState.Setters>
                        <Setter Target="relativePanel.(UIElement.Opacity)" Value="0"/>
                        <Setter Target="relativePanel.(UIElement.Visibility)" Value="Collapsed"/>
                    </VisualState.Setters>

                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup x:Name="WidthCheck">
                <VisualState x:Name="NarrowView">
                    <VisualState.StateTriggers>
                        <!--<AdaptiveTrigger MinWindowWidth="0" MinWindowHeight="0"/>-->

                        <StateTrigger x:Name="narrowTrigger"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>

                        <Setter Target="flipView.(Grid.RowSpan)" Value="1"/>
                        <Setter Target="flipView.(Grid.Column)" Value="0"/>
                        <Setter Target="flipView.(Grid.ColumnSpan)" Value="2"/>
                        <Setter Target="propertiesPanel.(Grid.ColumnSpan)" Value="2"/>
                        <Setter Target="propertiesPanel.(Grid.Row)" Value="1"/>
                        <Setter Target="propertiesPanel.(Grid.RowSpan)" Value="1"/>
                        <Setter Target="flipViewClipboard.(Grid.Row)" Value="1"/>
                        <Setter Target="flipViewClipboard.(Grid.Column)" Value="0"/>
                        <Setter Target="flipViewClipboard.(Grid.ColumnSpan)" Value="3"/>
                        <Setter Target="flipViewClipboard.(Grid.RowSpan)" Value="1"/>

                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="WideView">
                    <VisualState.StateTriggers>
                        <!--<AdaptiveTrigger MinWindowWidth="480" MinWindowHeight="800"   />-->
                        <!--<StateTrigger IsActive="{Binding IsInWideMode, ElementName=StateTriggerActiveReadingBehavior}" />-->
                        <StateTrigger x:Name="wideTrigger"/>

                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="pivot.(UIElement.Visibility)" Value="Visible"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup x:Name="SuggestButton">
                <VisualStateGroup.Transitions>

                    <VisualTransition GeneratedDuration="0:0:1" To="CommandGetFromClipboard"       />
                    <VisualTransition GeneratedDuration="0:0:1" To="CommandPushClipToCurrentItem"  />
                    <VisualTransition GeneratedDuration="0:0:1" To="CommandLoadFromUserFile"      />
                    <VisualTransition GeneratedDuration="0:0:1" To="CommandReshare"                />
                    <VisualTransition GeneratedDuration="0:0:1">
                        <VisualTransition.GeneratedEasingFunction>
                            <BounceEase EasingMode="EaseOut"/>
                        </VisualTransition.GeneratedEasingFunction>
                    </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="CommandGetFromClipboard">
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Projection).(PlaneProjection.LocalOffsetZ)" Storyboard.TargetName="appBarButton1">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                            <EasingDoubleKeyFrame KeyTime="0:0:.5" Value="200">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <BounceEase EasingMode="EaseOut"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
                <VisualState x:Name="CommandPushClipToCurrentItem">
                    <VisualState.Setters>
                        <Setter Target="appBarButton2.(UIElement.Projection).(PlaneProjection.LocalOffsetZ)" Value="200"/>
                    </VisualState.Setters>
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Projection).(PlaneProjection.LocalOffsetZ)" Storyboard.TargetName="appBarButton2">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                            <EasingDoubleKeyFrame KeyTime="0:0:.5" Value="200">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <BounceEase EasingMode="EaseOut"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
                <VisualState x:Name="CommandLoadFromUserFile">
                    <VisualState.Setters>
                        <Setter Target="appBarButton.(UIElement.Projection).(PlaneProjection.LocalOffsetZ)" Value="200"/>
                    </VisualState.Setters>
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Projection).(PlaneProjection.LocalOffsetZ)" Storyboard.TargetName="appBarButton">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                            <EasingDoubleKeyFrame KeyTime="0:0:.5" Value="200">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <BounceEase EasingMode="EaseOut"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
                <VisualState x:Name="CommandReshare">
                    <VisualState.Setters>
                        <Setter Target="appBarButton3.(UIElement.Projection).(PlaneProjection.RotationZ)">
                            <Setter.Value>
                                <x:Double>0</x:Double>
                            </Setter.Value>
                        </Setter>
                    </VisualState.Setters>
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Projection).(PlaneProjection.LocalOffsetZ)" Storyboard.TargetName="appBarButton3">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                            <EasingDoubleKeyFrame KeyTime="0:0:.5" Value="200">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <BounceEase EasingMode="EaseOut"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup x:Name="AppBarFolded">
                <VisualStateGroup.Transitions>
                    <VisualTransition GeneratedDuration="0:0:0.2"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Folded">
                    <VisualState.Setters>
                        <Setter Target="pivot.(FrameworkElement.Margin)">
                            <Setter.Value>
                                <Thickness>8,8,8,12</Thickness>
                            </Setter.Value>
                        </Setter>
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfolded">
                    <VisualState.Setters>
                        <Setter Target="pivot.(FrameworkElement.Margin)">
                            <Setter.Value>
                                <Thickness>8,8,8,72</Thickness>
                            </Setter.Value>
                        </Setter>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        <ProgressRing
        RelativePanel.AlignBottomWithPanel="True" 
        RelativePanel.AlignTopWithPanel="True"
        RelativePanel.AlignLeftWithPanel="True"
        RelativePanel.AlignRightWithPanel="True"  
          MaxWidth="200" MaxHeight="200"        
         IsActive="{Binding IsUIBusy}" Canvas.ZIndex="1000"   HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ></ProgressRing>
        <Pivot  IsEnabled="{Binding IsUIBusy, Converter={StaticResource NotValueConverter}}" x:Name="pivot" Margin="8,8,8,12"  SelectedIndex="{Binding FocusingViewIndex, Mode=TwoWay}"  Background="#33F0F8FF" RelativePanel.Above="AppBar" RelativePanel.AlignTopWithPanel="True" RelativePanel.AlignBottomWithPanel="True" RelativePanel.AlignLeftWithPanel="True" RelativePanel.AlignRightWithPanel="True">
            <PivotItem Header="Current Share">
                <Grid x:Name="grid1" >

                    <StackPanel Visibility="Collapsed"
						HorizontalAlignment="Center" VerticalAlignment="Center"
						Orientation="Vertical" x:Name="textBlock" d:LayoutOverrides="Height" d:IsHidden="True">

                        <TextBlock  TextAlignment="Center"
							TextWrapping="Wrap"
							Opacity=".7" Foreground="#333333" FontSize="30" d:LayoutOverrides="LeftMargin, RightMargin, TopMargin, BottomMargin, LeftPosition, RightPosition, TopPosition, BottomPosition">
                    	    
							<Bold>	<Run Text="You have No Data to share."/>
								<Run/>
								<Run Text="Try open a .gshare file, "/>
								<Run Text="or import some data from"/>   </Bold>
                        </TextBlock>
                        <HyperlinkButton x:Name="hyperlinkButton" HorizontalAlignment="Center" FontSize="34.667" FontWeight="Bold" Content="Clipboard" Command="{Binding CommandGetFromClipboard}" CommandParameter="PushClipboardToCurrent">
                            <!--<Interactivity:Interaction.Behaviors>
                                <Core:EventTriggerBehavior EventName="Click" SourceObject="{Binding ElementName=hyperlinkButton}">
                                    <Core:ChangePropertyAction TargetObject="{Binding ElementName=pivot, Mode=OneWay}" PropertyName="SelectedIndex" Value="1"/>
                                </Core:EventTriggerBehavior>
                            </Interactivity:Interaction.Behaviors>-->
                        </HyperlinkButton>
                    </StackPanel>

                    <Grid x:Name="relativePanel"  >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="36*"/>
                            <ColumnDefinition Width="64*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="64*"/>
                            <RowDefinition Height="36*"/>
                        </Grid.RowDefinitions>


                        <ScrollViewer BorderBrush="{ThemeResource TextBoxBorderThemeBrush}" Background="#19001010" Margin="8"  ScrollViewer.VerticalScrollBarVisibility="Visible"  RelativePanel.AlignLeftWithPanel="True" x:Name="propertiesPanel" Grid.RowSpan="2">
                            <ScrollViewer.Resources>
                                <Style  TargetType="StackPanel">
                                    <Setter Property="Margin" Value="8"/>
                                </Style>
                                <Style TargetType="HyperlinkButton" >
                                    <Setter Property="Margin"  Value="10,0,10,0" />
                                </Style>
                            </ScrollViewer.Resources>
                            <ScrollViewer.BorderThickness>
                                <StaticResource ResourceKey="ThinBoderThickness"/>
                            </ScrollViewer.BorderThickness>
                            <StackPanel x:Name="stackPanel"  Margin="16" >
                                <StackPanel >
                                    <TextBlock>
										<Run Text="Title:"/>
                                    </TextBlock>
                                    <TextBox  x:Name="pageTitle" Text="{Binding ReceivedShareItem.Title, Mode=TwoWay}"  
										 TextWrapping="NoWrap"/>
                                    <StackPanel HorizontalAlignment="Right" Margin="0">
                                        <HyperlinkButton
											IsEnabled="{Binding ReceivedShareItem.Title, Converter={StaticResource FalseIfIsStringNullOrEmptyConverter}}"   
                                        
											Command="{Binding CommandSendParameterToText}" CommandParameter="{Binding ReceivedShareItem.Title}" ToolTipService.ToolTip="{StaticResource AppendToTextShare}">
                                            <FontIcon FontSize="14" FontFamily="Segoe UI Symbol" Glyph="&#xE17D;" />
                                        </HyperlinkButton>
                                    </StackPanel>
                                </StackPanel>
                                <StackPanel >
                                    <TextBlock>
										<Run Text="Logo 30x30:"/>
                                    </TextBlock>
                                    <Border HorizontalAlignment="Left" VerticalAlignment="Top" BorderThickness="1" BorderBrush="DarkRed">
                                        <Border.Background>
                                            <SolidColorBrush Color="{Binding ReceivedShareItem.LogoBackgroundColor}"/>
                                        </Border.Background>

                                        <Image Width="30" Height="30"  HorizontalAlignment="Left" VerticalAlignment="Top"  Source="{Binding ReceivedShareItem.Square30x30Logo, Converter={StaticResource StreamImageSourceConverter}}" />
                                    </Border>
                                </StackPanel>
                                <StackPanel >
                                    <TextBlock>
										<Run Text="Thumbnail:"/>
                                    </TextBlock>
                                    <Border HorizontalAlignment="Left" VerticalAlignment="Top" BorderThickness="1" BorderBrush="DarkRed">
                                        <Image MinHeight="50" MinWidth="50" Source="{Binding ReceivedShareItem.Thumbnail, Converter={StaticResource StreamImageSourceConverter}}" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                                    </Border>
                                </StackPanel>

                                <StackPanel >
                                    <TextBlock>
										<Run Text="Description:"/>
                                    </TextBlock>

                                    <TextBox Height="100" ScrollViewer.VerticalScrollBarVisibility="Auto" TextWrapping="Wrap" AcceptsReturn="True" Text="{Binding ReceivedShareItem.Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                    <StackPanel HorizontalAlignment="Right" Margin="0">
                                        <HyperlinkButton 
											IsEnabled="{Binding ReceivedShareItem.Description, Converter={StaticResource FalseIfIsStringNullOrEmptyConverter}}"   
                                        
											Command="{Binding CommandSendParameterToText}" CommandParameter="{Binding ReceivedShareItem.Description}" ToolTipService.ToolTip="{StaticResource AppendToTextShare}">
                                            <FontIcon FontSize="14" FontFamily="Segoe UI Symbol" Glyph="&#xE17D;" />
                                        </HyperlinkButton>
                                    </StackPanel>
                                </StackPanel>
                                <StackPanel >
                                    <TextBlock>
										<Run Text="QuickLinkId:"/>
                                    </TextBlock>
                                    <TextBox Text="{Binding ReceivedShareItem.QuickLinkId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                    <StackPanel HorizontalAlignment="Right" Margin="0">
                                        <HyperlinkButton
											IsEnabled="{Binding ReceivedShareItem.QuickLinkId, Converter={StaticResource FalseIfIsStringNullOrEmptyConverter}}"   
                                       
											Command="{Binding CommandSendParameterToText}" CommandParameter="{Binding ReceivedShareItem.QuickLinkId}" ToolTipService.ToolTip="{StaticResource AppendToTextShare}">
                                            <FontIcon FontSize="14" FontFamily="Segoe UI Symbol" Glyph="&#xE17D;" />
                                        </HyperlinkButton>
                                    </StackPanel>
                                </StackPanel>
                                <StackPanel >
                                    <RelativePanel >
                                        <TextBlock x:Name="label">
											<Run Text="Content Source ApplicationLink:"/>
                                        </TextBlock>
                                        <TextBox x:Name="textBox" Text="{Binding ReceivedShareItem.ContentSourceApplicationLink, Converter={StaticResource UriStringConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" RelativePanel.Below="label" RelativePanel.AlignRightWith="" RelativePanel.AlignLeftWithPanel="True" RelativePanel.AlignRightWithPanel="True"/>

                                    </RelativePanel>
                                    <StackPanel HorizontalAlignment="Right" Orientation="Horizontal" Margin="0">
                                        <HyperlinkButton
											x:Name="hyperlinkButton1" 
											IsEnabled="{Binding ReceivedShareItem.ContentSourceApplicationLink, Converter={StaticResource IsNotNullConverter}}"   
											NavigateUri="{Binding ReceivedShareItem.ContentSourceApplicationLink}" ToolTipService.ToolTip="{StaticResource VisitUri}" >
                                            <FontIcon FontFamily="Segoe UI Symbol" Glyph="&#xE12B;" />
                                        </HyperlinkButton>
                                        <HyperlinkButton 
											IsEnabled="{Binding ReceivedShareItem.ContentSourceApplicationLink, Converter={StaticResource IsNotNullConverter}}"   
											Command="{Binding CommandSendParameterToText}" CommandParameter="{Binding ReceivedShareItem.ContentSourceApplicationLink}" ToolTipService.ToolTip="{StaticResource AppendToTextShare}">
                                            <FontIcon FontSize="14" FontFamily="Segoe UI Symbol" Glyph="&#xE17D;" />
                                        </HyperlinkButton>
                                    </StackPanel>
                                </StackPanel>
                                <StackPanel >
                                    <RelativePanel >
                                        <TextBlock x:Name="label2">
											<Run Text="Content Source WebLink:"/>
                                        </TextBlock>
                                        <TextBox Text="{Binding ReceivedShareItem.ContentSourceWebLink, Converter={StaticResource UriStringConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  RelativePanel.Below="label2" RelativePanel.AlignRightWith="" RelativePanel.AlignLeftWithPanel="True" RelativePanel.AlignRightWithPanel="True"/>

                                    </RelativePanel>
                                    <StackPanel HorizontalAlignment="Right" Margin="0" Orientation="Horizontal">
                                        <HyperlinkButton 
											IsEnabled="{Binding ReceivedShareItem.ContentSourceWebLink, Converter={StaticResource IsNotNullConverter}}"   
											NavigateUri="{Binding ReceivedShareItem.ContentSourceWebLink}" ToolTipService.ToolTip="{StaticResource VisitUri}" >
                                            <FontIcon FontFamily="Segoe UI Symbol" Glyph="&#xE12B;" />
                                        </HyperlinkButton>
                                        <HyperlinkButton 
											IsEnabled="{Binding ReceivedShareItem.ContentSourceWebLink, Converter={StaticResource IsNotNullConverter}}"   
											Command="{Binding CommandSendParameterToText}" CommandParameter="{Binding ReceivedShareItem.ContentSourceWebLink}" ToolTipService.ToolTip="{StaticResource AppendToTextShare}">
                                            <FontIcon FontSize="14" FontFamily="Segoe UI Symbol" Glyph="&#xE17D;" />
                                        </HyperlinkButton>
                                    </StackPanel>
                                </StackPanel>


                                <StackPanel >
                                    <TextBlock>
										<Run Text="PackageFamilyName:"/>
                                    </TextBlock>
                                    <TextBox Text="{Binding ReceivedShareItem.PackageFamilyName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                                    <StackPanel HorizontalAlignment="Right" Margin="0">
                                        <HyperlinkButton 
											IsEnabled="{Binding ReceivedShareItem.PackageFamilyName, Converter={StaticResource FalseIfIsStringNullOrEmptyConverter}}"   
                                        
											Command="{Binding CommandSendParameterToText}" CommandParameter="{Binding ReceivedShareItem.PackageFamilyName}" ToolTipService.ToolTip="{StaticResource AppendToTextShare}">


                                            <FontIcon FontSize="14" FontFamily="Segoe UI Symbol" Glyph="&#xE17D;" />
                                        </HyperlinkButton>
                                    </StackPanel>
                                </StackPanel>

                                <!--<ListView ItemsSource="{Binding ReceivedShareItem.AvialableShareItems}">

            </ListView>-->
                            </StackPanel>
                        </ScrollViewer>
                        <Grid BorderBrush="{ThemeResource TextBoxBorderThemeBrush}"  BorderThickness="{StaticResource ThinBoderThickness}" x:Name="flipView" RelativePanel.RightOf="propertiesPanel"  RelativePanel.AlignRightWithPanel="True" RelativePanel.AlignTopWithPanel="True" Height="{Binding Width, RelativeSource={RelativeSource Mode=Self}}"   Margin="8" Grid.RowSpan="2" Grid.Column="1"  >

                            <FlipView xmlns:glue="using:GreaterShare.Glue" x:Name="flipView1" 
								ItemsSource="{Binding ReceivedShareItem.AvialableShareItems}" 
								SelectedItem="{Binding CurrentViewingItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  d:LayoutOverrides="LeftPosition, RightPosition, TopPosition, BottomPosition"   >
                                <ItemsControl.ItemTemplateSelector>
                                    <glue:ShareItemDataTemplateSelector  PrefixOfTemplateKey="DataTemplateOf"/>
                                </ItemsControl.ItemTemplateSelector>
                            </FlipView>
                            <ListView  Background="#20202020"
                         
                            Canvas.ZIndex="2"    Height="8"
                                ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                                ScrollViewer.VerticalScrollBarVisibility="Hidden"
                                                                        
                                ScrollViewer.HorizontalScrollMode="Disabled"
                                ScrollViewer.VerticalScrollMode="Disabled"
                                 SelectedItem="{Binding SelectedItem, ElementName=flipView1, Mode=TwoWay}" ItemsSource="{Binding ItemsSource, ElementName=flipView1}"  Grid.Row="1" d:LayoutOverrides="TopMargin, BottomMargin" HorizontalAlignment="Center" VerticalAlignment="Top" ItemContainerStyle="{StaticResource IndicatorListViewItem}" ItemTemplate="{StaticResource IndicatorItemTemplate}">

                                <ListView.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <VirtualizingStackPanel   AreScrollSnapPointsRegular="True" Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ListView.ItemsPanel>
                            </ListView>
                        </Grid>

                    </Grid>
                </Grid>
            </PivotItem>
            <PivotItem Header="Clipboard Share">
                <Grid >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="5*"/>
                        <RowDefinition Height="85*"/>
                        <RowDefinition Height="15*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="18*"/>
                        <ColumnDefinition Width="64*"/>
                        <ColumnDefinition Width="18*"/>
                    </Grid.ColumnDefinitions>
                    <Grid x:Name="flipViewClipboard"   Margin="4" Grid.RowSpan="3" Grid.Column="1">
                        <FlipView Name="flipview2" 
                        xmlns:glue="using:GreaterShare.Glue"  
                        BorderThickness="{StaticResource ThinBoderThickness}" 
                        BorderBrush="{ThemeResource TextBoxBorderThemeBrush}" 
                        ItemsSource="{Binding ClipboardImportingItem.AvialableShareItems}" 
                        Height="{Binding Width, RelativeSource={RelativeSource Mode=Self}}"   
                         >
                            <FlipView.ItemTemplateSelector>
                                <glue:ShareItemDataTemplateSelector  PrefixOfTemplateKey="DataTemplateOf"/>
                            </FlipView.ItemTemplateSelector>
                        </FlipView>
                        <ListView  Background="#20202020"
                         
                            Canvas.ZIndex="2"    Height="8"
                                ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                                ScrollViewer.VerticalScrollBarVisibility="Hidden"
                                                                        
                                ScrollViewer.HorizontalScrollMode="Disabled"
                                ScrollViewer.VerticalScrollMode="Disabled"
                                 SelectedItem="{Binding SelectedItem, ElementName=flipview2, Mode=TwoWay}" ItemsSource="{Binding ItemsSource, ElementName=flipview2}"  Grid.Row="1" d:LayoutOverrides="TopMargin, BottomMargin" HorizontalAlignment="Center" VerticalAlignment="Top" ItemContainerStyle="{StaticResource IndicatorListViewItem}" ItemTemplate="{StaticResource IndicatorItemTemplate}">

                            <ListView.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel   AreScrollSnapPointsRegular="True" Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ListView.ItemsPanel>
                        </ListView>
                    </Grid>
                    <!--<StackPanel Grid.Column="1"  Orientation="Vertical" Grid.ColumnSpan="2" Grid.Row="1" Grid.RowSpan="2" HorizontalAlignment="Right" Margin="16" VerticalAlignment="Bottom">
                        -->
                    <!--<AppBar>-->
                    <!--<StackPanel Orientation="Horizontal">-->
                    <!--</StackPanel>-->
                    <!--</AppBar>-->
                    <!--
                    </StackPanel>-->
                </Grid>

            </PivotItem>

        </Pivot>
      
        <local:Background Canvas.ZIndex="-2" Margin="0" RelativePanel.AlignBottomWithPanel="True" RelativePanel.AlignLeftWithPanel="True" RelativePanel.AlignRightWithPanel="True" RelativePanel.AlignTopWithPanel="True"/>
        <AppBar x:Name="AppBar"  VerticalAlignment="Bottom" IsDoubleTapEnabled="False" IsTabStop="True" IsSticky="True" ClosedDisplayMode="Minimal" UseSystemFocusVisuals="True" IsOpen="True"  Margin="0" RelativePanel.AlignLeftWithPanel="True" RelativePanel.AlignRightWithPanel="True" RelativePanel.AlignBottomWithPanel="True"  >
            <Interactivity:Interaction.Behaviors>
                <Core:DataTriggerBehavior Binding="{Binding SugguestingCommand}" ComparisonCondition="NotEqual" Value="{x:Null}">
                    <Core:GoToStateAction StateName="{Binding SugguestingCommand}"/>
                </Core:DataTriggerBehavior>
                <Core:DataTriggerBehavior Binding="{Binding IsOpen, ElementName=AppBar}" ComparisonCondition="Equal" Value="True">
                    <Core:GoToStateAction StateName="Unfolded"/>
                </Core:DataTriggerBehavior>
                <Core:DataTriggerBehavior Binding="{Binding IsOpen, ElementName=AppBar}" ComparisonCondition="Equal" Value="False">
                    <Core:GoToStateAction StateName="Folded"/>
                </Core:DataTriggerBehavior>
            </Interactivity:Interaction.Behaviors>

            <Grid Margin="1">

                <StackPanel Orientation="Horizontal"  Visibility="{Binding SelectedIndex, ConverterParameter=0, Converter={StaticResource HideWhenNotMatchConverter}, ElementName=pivot}">
                    <AppBarButton Command="{Binding StrongTypeViewModel.CommandLoadFromUserFile, ElementName=mVVMPage}" x:Name="appBarButton" HorizontalAlignment="Left" Icon="OpenLocal"  Label="Load" VerticalAlignment="Top">
                        <AppBarButton.Projection>
                            <PlaneProjection/>
                        </AppBarButton.Projection>
                    </AppBarButton>
                    <AppBarButton Command="{Binding StrongTypeViewModel.CommandSaveToUserFile, ElementName=mVVMPage}" Icon="SaveLocal" Label="Save" />
                </StackPanel>
                <StackPanel x:Name="stackPanel1" Grid.Column="1"  Orientation="Horizontal" HorizontalAlignment="Right" Visibility="{Binding SelectedIndex, ConverterParameter=1, Converter={StaticResource HideWhenNotMatchConverter}, ElementName=pivot}">

                    <AppBarButton x:Name="appBarButton1"  Label="Paste"  Command="{Binding StrongTypeViewModel.CommandGetFromClipboard, ElementName=mVVMPage}" Icon="Paste" >
                        <AppBarButton.Projection>
                            <PlaneProjection/>
                        </AppBarButton.Projection>
                    </AppBarButton>
                    <AppBarButton x:Name="appBarButton2" Label="Append" Command="{Binding StrongTypeViewModel.CommandPushClipToCurrentItem, ElementName=mVVMPage}" Icon="Import">
                        <AppBarButton.Projection>
                            <PlaneProjection/>
                        </AppBarButton.Projection>
                    </AppBarButton>

                </StackPanel>
                <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right" x:Name="stackPanel2"  Visibility="{Binding SelectedIndex, ConverterParameter=0, Converter={StaticResource HideWhenNotMatchConverter}, ElementName=pivot}">

                    <!--<AppBarButton Command="{Binding StrongTypeViewModel.CommandReshareCurrent, ElementName=mVVMPage}" HorizontalAlignment="Left" Icon="Target"  Label="Reshare" VerticalAlignment="Top"/>
                    <AppBarButton Command="{Binding StrongTypeViewModel.CommandReshareSelected, ElementName=mVVMPage}" HorizontalAlignment="Left" Icon="Bullets"  Label="Reshare " VerticalAlignment="Top"/>-->
                    <AppBarButton x:Name="appBarButton3"
                     HorizontalAlignment="Left" Icon="ReShare"  Label="Reshare"   Command="{Binding CommandReshare}" CommandParameter="NoExecute" VerticalAlignment="Top">
                        <AppBarButton.Flyout>
                            <MenuFlyout >
                                <MenuFlyoutItem  Command="{Binding CommandReshareCurrent}">This</MenuFlyoutItem>
                                <MenuFlyoutItem  Command="{Binding CommandReshareSelected}">Selected</MenuFlyoutItem>
                                <MenuFlyoutItem Name="reshareAll"  Command="{Binding CommandReshare}">All</MenuFlyoutItem>

                            </MenuFlyout>
                        </AppBarButton.Flyout>

                        <AppBarButton.Projection>
                            <PlaneProjection/>
                        </AppBarButton.Projection>
                    </AppBarButton>
                </StackPanel>
            </Grid>

        </AppBar>
    </RelativePanel>


</mvvm:MVVMPage>
